<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Minesweeper â€” Playable</title>
  <style>
    :root{--bg:#0f1724;--panel:#111827;--accent:#f97316;--safe:#10b981;--danger:#ef4444;--glass:rgba(255,255,255,0.03)}
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,'Helvetica Neue',Arial;background:linear-gradient(180deg,var(--bg),#071023);color:#e6eef8;display:flex;align-items:center;justify-content:center;padding:24px}
    .app{width:100%;max-width:980px}
    header{display:flex;align-items:center;justify-content:space-between;margin-bottom:16px}
    h1{font-size:20px;margin:0}
    .controls{display:flex;gap:8px;align-items:center}
    select,button{background:var(--panel);border:1px solid rgba(255,255,255,0.06);color:inherit;padding:8px 12px;border-radius:8px}
    .hud{display:flex;gap:12px;align-items:center}
    .hud .stat{background:var(--glass);padding:8px 12px;border-radius:8px;min-width:72px;text-align:center;font-variant-numeric:tabular-nums}
    .board-wrap{background:linear-gradient(180deg,rgba(255,255,255,0.02),transparent);padding:18px;border-radius:12px;border:1px solid rgba(255,255,255,0.04)}
    .board{display:grid;gap:6px;touch-action:none;user-select:none}
    .cell{width:36px;height:36px;display:flex;align-items:center;justify-content:center;background:linear-gradient(180deg,#0b1220,#071021);border-radius:6px;border:1px solid rgba(255,255,255,0.03);font-weight:700;cursor:pointer}
    .cell.revealed{background:linear-gradient(180deg,#e6eef8,#d4e7ff);color:#0b1220;cursor:default;border:1px solid rgba(11,18,32,0.06)}
    .cell.mine.revealed{background:linear-gradient(180deg,#ffefef,#ffdede);color:var(--danger)}
    .cell.flag{background:linear-gradient(180deg,#fff6,#fff9);}
    .cell[data-num="1"]{color:#2563eb}
    .cell[data-num="2"]{color:#059669}
    .cell[data-num="3"]{color:#dc2626}
    .cell[data-num="4"]{color:#7c3aed}
    .cell[data-num="5"]{color:#b45309}
    .cell[data-num="6"]{color:#0ea5a4}
    .cell[data-num="7"]{color:#374151}
    .cell[data-num="8"]{color:#111827}

    .footer{margin-top:12px;color:rgba(230,238,248,0.7);font-size:13px}
    .overlay{position:fixed;inset:0;background:rgba(2,6,23,0.6);display:flex;align-items:center;justify-content:center}
    .modal{background:#071022;padding:28px;border-radius:12px;border:1px solid rgba(255,255,255,0.04);text-align:center}
    .modal h2{margin:0 0 8px}
    .modal p{margin:0 0 16px}
    @media (max-width:720px){
      .cell{width:40px;height:40px}
      .board{gap:5px}
    }
  </style>
</head>
<body>
  <div class="app">
    <header>
      <h1>Minesweeper</h1>
      <div class="controls">
        <label for="difficulty">Difficulty</label>
        <select id="difficulty">
          <option value="beginner">Beginner (9Ã—9, 10 mines)</option>
          <option value="intermediate" selected>Intermediate (16Ã—16, 40 mines)</option>
          <option value="expert">Expert (16Ã—30, 99 mines)</option>
          <option value="custom">Custom</option>
        </select>
        <div id="custom-controls" style="display:none;gap:6px;align-items:center;display:flex">
          <input id="custom-rows" type="number" min="5" max="40" value="16" style="width:72px;padding:6px;border-radius:6px;border:1px solid rgba(255,255,255,0.06);background:var(--panel);color:inherit">
          <input id="custom-cols" type="number" min="5" max="60" value="30" style="width:72px;padding:6px;border-radius:6px;border:1px solid rgba(255,255,255,0.06);background:var(--panel);color:inherit">
          <input id="custom-mines" type="number" min="1" value="99" style="width:88px;padding:6px;border-radius:6px;border:1px solid rgba(255,255,255,0.06);background:var(--panel);color:inherit">
        </div>
        <button id="restart">New Game</button>
      </div>
    </header>

    <div class="board-wrap">
      <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:10px">
        <div class="hud">
          <div class="stat" id="mines-left">Mines: 0</div>
          <div class="stat" id="timer">Time: 0</div>
        </div>
        <div>
          <button id="hint">Hint</button>
        </div>
      </div>

      <div id="board" class="board" aria-label="Minesweeper board"></div>
    </div>

    <div class="footer">Left-click to reveal. Right-click (or long-press) to place a flag. Works offline â€” drop this index.html into a GitHub repo and enable GitHub Pages.</div>
  </div>

  <template id="cell-template">
    <div class="cell" role="button" tabindex="0"></div>
  </template>

  <div id="modal-root"></div>

  <script>
    (function(){
      // Game config and state
      const difficultyEl = document.getElementById('difficulty');
      const customControls = document.getElementById('custom-controls');
      const customRows = document.getElementById('custom-rows');
      const customCols = document.getElementById('custom-cols');
      const customMines = document.getElementById('custom-mines');
      const restartBtn = document.getElementById('restart');
      const boardEl = document.getElementById('board');
      const minesLeftEl = document.getElementById('mines-left');
      const timerEl = document.getElementById('timer');
      const hintBtn = document.getElementById('hint');
      const modalRoot = document.getElementById('modal-root');

      let rows=16, cols=30, mines=99;
      let grid = []; // cells
      let started=false, timer=0, timerInt=null, flags=0, revealedCount=0, totalCells=0;
      let gameOver=false;

      function setDifficulty(kind){
        if(kind==='beginner'){rows=9;cols=9;mines=10}
        else if(kind==='intermediate'){rows=16;cols=16;mines=40}
        else if(kind==='expert'){rows=16;cols=30;mines=99}
        else if(kind==='custom'){rows=Number(customRows.value)||10;cols=Number(customCols.value)||10;mines=Number(customMines.value)||10}
        totalCells = rows*cols;
        boardEl.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
      }

      function createGrid(){
        grid = Array.from({length:rows},()=>Array.from({length:cols},()=>({mine:false,adj:0,revealed:false,flag:false,el:null})));
      }

      function placeMines(seedRow,seedCol){
        // avoid first click
        let toPlace=mines;
        while(toPlace>0){
          const r=Math.floor(Math.random()*rows);
          const c=Math.floor(Math.random()*cols);
          if(grid[r][c].mine) continue;
          // don't place on seed or neighbors
          if(Math.abs(r-seedRow)<=1 && Math.abs(c-seedCol)<=1) continue;
          grid[r][c].mine=true; toPlace--;
        }
        // compute adj
        for(let r=0;r<rows;r++){
          for(let c=0;c<cols;c++){
            if(grid[r][c].mine) continue;
            let count=0;
            for(let dr=-1;dr<=1;dr++) for(let dc=-1;dc<=1;dc++){
              if(dr===0 && dc===0) continue;
              const nr=r+dr,nc=c+dc;
              if(nr>=0 && nr<rows && nc>=0 && nc<cols && grid[nr][nc].mine) count++;
            }
            grid[r][c].adj = count;
          }
        }
      }

      function buildBoard(){
        boardEl.innerHTML='';
        boardEl.style.gridTemplateColumns = `repeat(${cols}, ${36}px)`;
        revealedCount=0; flags=0; gameOver=false; started=false; timer=0; updateTimer();
        clearInterval(timerInt); timerInt=null;
        for(let r=0;r<rows;r++){
          for(let c=0;c<cols;c++){
            const div=document.createElement('div');
            div.className='cell';
            div.dataset.r=r; div.dataset.c=c; div.setAttribute('aria-label',`cell ${r+1}-${c+1}`);
            attachCellHandlers(div);
            boardEl.appendChild(div);
            grid[r][c].el=div;
          }
        }
        updateMinesLeft();
      }

      function attachCellHandlers(el){
        let longPressTimer=null;
        el.addEventListener('contextmenu',e=>e.preventDefault());

        el.addEventListener('pointerdown', e=>{
          if(gameOver) return;
          // start long-press for mobile to flag
          longPressTimer = setTimeout(()=>{ toggleFlag(el); longPressTimer=null },600);
        });
        el.addEventListener('pointerup', e=>{
          if(gameOver) return;
          if(longPressTimer){
            clearTimeout(longPressTimer); longPressTimer=null;
            if(e.button===2 || (e.ctrlKey && e.button===0)) { toggleFlag(el); }
            else { revealCell(el); }
          }
        });
        el.addEventListener('pointercancel', ()=>{ if(longPressTimer){clearTimeout(longPressTimer); longPressTimer=null}});
        // keyboard support: Enter to reveal, Space to flag
        el.addEventListener('keydown', e=>{
          if(e.key==='Enter') revealCell(el);
          if(e.key===' '){ e.preventDefault(); toggleFlag(el); }
        });
      }

      function revealCell(el){
        const r=Number(el.dataset.r), c=Number(el.dataset.c);
        const cell = grid[r][c];
        if(gameOver || cell.revealed || cell.flag) return;
        if(!started){ placeMines(r,c); started=true; startTimer(); }
        if(cell.mine){
          // reveal all mines and show lose
          cell.revealed=true; cell.el.classList.add('revealed','mine'); cell.el.textContent='ðŸ’£';
          revealAllMines(); endGame(false); return;
        }
        floodReveal(r,c);
        checkWin();
      }

      function floodReveal(sr,sc){
        const stack=[[sr,sc]];
        while(stack.length){
          const [r,c]=stack.pop();
          const cell = grid[r][c];
          if(cell.revealed || cell.flag) continue;
          cell.revealed=true; revealedCount++;
          const el=cell.el; el.classList.add('revealed');
          if(cell.adj>0){ el.textContent = cell.adj; el.dataset.num = cell.adj; }
          else { el.textContent='';
            for(let dr=-1;dr<=1;dr++) for(let dc=-1;dc<=1;dc++){
              if(dr===0 && dc===0) continue; const nr=r+dr, nc=c+dc;
              if(nr>=0 && nr<rows && nc>=0 && nc<cols) stack.push([nr,nc]);
            }
          }
        }
      }

      function toggleFlag(el){
        const r=Number(el.dataset.r), c=Number(el.dataset.c);
        const cell=grid[r][c];
        if(cell.revealed || gameOver) return;
        cell.flag = !cell.flag;
        if(cell.flag){ el.textContent='ðŸš©'; el.classList.add('flag'); flags++; }
        else { el.textContent=''; el.classList.remove('flag'); flags--; }
        updateMinesLeft();
        checkWin();
      }

      function revealAllMines(){
        for(let r=0;r<rows;r++) for(let c=0;c<cols;c++){
          const cell=grid[r][c];
          if(cell.mine){ cell.revealed=true; cell.el.classList.add('revealed','mine'); if(!cell.el.textContent) cell.el.textContent='ðŸ’£'; }
        }
      }

      function updateMinesLeft(){
        const left = Math.max(0, mines - flags);
        minesLeftEl.textContent = `Mines: ${left}`;
      }

      function startTimer(){
        timerInt = setInterval(()=>{ timer++; updateTimer(); },1000);
      }
      function updateTimer(){ timerEl.textContent = `Time: ${timer}`; }

      function checkWin(){
        // win when all non-mine cells revealed OR flagged mines equal mines and revealed count = totalCells-mines
        if(revealedCount === totalCells - mines){ endGame(true); }
      }

      function endGame(won){
        gameOver=true; clearInterval(timerInt);
        showModal(won ? 'You win!' : 'Game over', won ? `Well done â€” completed in ${timer} seconds.` : 'You hit a mine. Try again!');
      }

      function showModal(title,text){
        modalRoot.innerHTML = `\n        <div class=\"overlay\">\n          <div class=\"modal\">\n            <h2>${title}</h2>\n            <p>${text}</p>\n            <div style=\"display:flex;gap:10px;justify-content:center\">\n              <button id=\"modal-new\">New Game</button>\n              <button id=\"modal-close\">Close</button>\n            </div>\n          </div>\n        </div>`;
        document.getElementById('modal-new').addEventListener('click', ()=>{ modalRoot.innerHTML=''; newGame(); });
        document.getElementById('modal-close').addEventListener('click', ()=>{ modalRoot.innerHTML=''; });
      }

      // Hint: reveal a safe random unrevealed cell
      hintBtn.addEventListener('click', ()=>{
        if(gameOver) return;
        const pool=[];
        for(let r=0;r<rows;r++) for(let c=0;c<cols;c++){
          const cell=grid[r][c]; if(!cell.revealed && !cell.mine && !cell.flag) pool.push([r,c]);
        }
        if(pool.length===0) return; const [r,c] = pool[Math.floor(Math.random()*pool.length)]; revealCell(grid[r][c].el);
      });

      // UI wiring
      difficultyEl.addEventListener('change', ()=>{
        if(difficultyEl.value==='custom'){ customControls.style.display='flex'; }
        else customControls.style.display='none';
      });

      restartBtn.addEventListener('click', ()=> newGame());

      function newGame(){
        const kind = difficultyEl.value;
        setDifficulty(kind);
        createGrid();
        buildBoard();
      }

      // init defaults
      newGame();

      // small usability: prevent image-drag selecting
      document.addEventListener('dragstart',e=>e.preventDefault());

    })();
  </script>
</body>
</html>
